/* autogenerated by Processing revision 1293 on 2024-04-13 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ColorCatcher extends PApplet {


int satelliteCount = 10;
// create an ArrayList<Satellite> to hold all the satellites
ArrayList<Satellite> satellites = new ArrayList<Satellite>();

// the central planet
Planet planet;

// start of sketch
public void setup() {

	/* size commented out by preprocessor */;
	
	// instatiate the planet
	planet = new Planet(width*0.5f, height*0.5f, min(width, height) * 0.25f);

	// instatiate the satellites
	for(int i=0; i<satelliteCount; i++) {
		satellites.add(new Satellite(i));
	}

}

// main loop
public void draw() {
	
	float hue = map((millis()*0.1f) % 1000, 0, 1000, 0, 360);
	colorMode(HSB, 360, 100, 100);
	background(hue, 0, 100);

	// draw the planet
	planet.draw();

	// draw all the satellites
	for (Satellite satellite : satellites) {
		satellite.draw();
	}
	
}
// The Planet class represents the central hexagonal shape in the middle of the screen

class Planet {

    float x, y, radius;

    Planet(float x, float y, float radius) {
        this.x = x;
        this.y = y;
        this.radius = radius;
    }

    // draw the planet
    public void draw() {

        colorMode(HSB, 360, 100, 100, 100);

        fill(0, 0, 100, 100);
        stroke(0, 0, 50, 100);
        strokeWeight(2);
        circle(x, y, radius * 2);
    }

}
// the Satellite class contains behavior of objects that are satellites spinning around the central planet

class Satellite {

    float x, y, radius, angle, speed, direction;
  
    Satellite(int index) {

        // the index determines the radius of the satellite around the central planet
        // given the planet's radius is 0.25 of min(width, height), the satellite's radius is 0.25 + the position of the satellite in the array
        // depending on the number of satellites, the range will be i/10 of the remaining space around the planet (approx 0.5 of min(width, height))
        float startRadius = 0.4f * min(width,height);
        float remainingRadius = 0.25f * min(width,height);
        this.radius = startRadius + (index * (remainingRadius / 10.0f));

        this.x = width * 0.5f;
        this.y = height * 0.5f;
        this.angle = random(360);
        this.speed = random(0.1f, 0.5f);
        this.direction = random(1) > 0.5f ? 1 : -1;
    }

    public void draw() {
            
            // the satellite is drawn as a circle with a radius of 0.05 of min(width, height)
            float satelliteRadius = 20;
            float satelliteX = this.x + this.radius * cos(radians(this.angle));
            float satelliteY = this.y + this.radius * sin(radians(this.angle));

            this.angle += this.speed * this.direction;
            // loop around 360 degrees
            this.angle += 360;
            this.angle %= 360;
    
            fill(0,100,100,100);
            noStroke();
            circle(satelliteX, satelliteY, satelliteRadius);
    }

}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ColorCatcher" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
